{"version":3,"sources":["images/image-jeremy.png","images/icon-ellipsis.svg","App.js","reportWebVitals.js","index.js"],"names":["App","useState","state","setState","className","src","dp","alt","onClick","e","id","data","map","d","title","timeframes","weekly","current","monthly","daily","options","previous","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"ylCAAe,MAA0B,yCCA1B,MAA0B,0C,OC+E1BA,MAxEf,WAAgB,IAAD,EACaC,mBAAS,UADtB,mBACNC,EADM,KACCC,EADD,KAEb,OACE,qBAAKC,UAAU,YAAf,SACE,sBAAKA,UAAU,UAAf,UACE,sBAAKA,UAAU,iBAAf,UACE,sBAAKA,UAAU,sBAAf,UACE,qBAAKC,IAAKC,EAAIC,IAAI,OAElB,4CACY,uDAGd,sBAAKH,UAAU,yBAAf,UACE,sBACEI,QAAS,SAACC,GAAD,OAAON,EAAS,UACzBO,GAAc,UAAVR,EAAoB,QAAU,GAFpC,mBAMA,sBACEM,QAAS,SAACC,GAAD,OAAON,EAAS,WACzBO,GAAc,WAAVR,EAAqB,QAAU,GAFrC,oBAMA,sBACEM,QAAS,SAACC,GAAD,OAAON,EAAS,YACzBO,GAAc,YAAVR,EAAsB,QAAU,GAFtC,2BAQJ,qBAAKE,UAAU,iBAAf,SACE,qBAAKA,UAAU,kBAAf,SACGO,EAAKC,KAAI,SAACC,GAAD,OACR,sBAAKT,UAAU,OAAf,UACE,6BAAKS,EAAEC,QAEP,iCACa,WAAVZ,EACGW,EAAEE,WAAWC,OAAOC,QACV,YAAVf,EACAW,EAAEE,WAAWG,QAAQD,QACX,UAAVf,EACAW,EAAEE,WAAWI,MAAMF,QACnB,GAPN,SAWA,qBAAKZ,IAAKe,EAASb,IAAI,YACvB,gDACe,GACF,WAAVL,EACGW,EAAEE,WAAWC,OAAOK,SACV,YAAVnB,EACAW,EAAEE,WAAWG,QAAQG,SACX,UAAVnB,EACAW,EAAEE,WAAWI,MAAME,SACnB,GARN,WAfyBR,EAAEC,oBChC5BQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9b07d24a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/image-jeremy.71cd41f1.png\";","export default __webpack_public_path__ + \"static/media/icon-ellipsis.a57a4ac8.svg\";","import React, { useState } from \"react\";\n\nimport \"./App.css\";\nimport data from \"./data.json\";\nimport dp from \"./images/image-jeremy.png\";\nimport options from \"./images/icon-ellipsis.svg\";\n\nfunction App() {\n  const [state, setState] = useState(\"weekly\");\n  return (\n    <div className=\"container\">\n      <div className=\"content\">\n        <div className=\"content__upper\">\n          <div className=\"content__upper__top\">\n            <img src={dp} alt=\"dp\" />\n\n            <h3>\n              Report for<span>Jeremy Robson</span>\n            </h3>\n          </div>\n          <div className=\"content__upper__bottom\">\n            <span\n              onClick={(e) => setState(\"daily\")}\n              id={state === \"daily\" ? \"white\" : \"\"}\n            >\n              Daily\n            </span>\n            <span\n              onClick={(e) => setState(\"weekly\")}\n              id={state === \"weekly\" ? \"white\" : \"\"}\n            >\n              Weekly\n            </span>\n            <span\n              onClick={(e) => setState(\"monthly\")}\n              id={state === \"monthly\" ? \"white\" : \"\"}\n            >\n              Monthly\n            </span>\n          </div>\n        </div>\n        <div className=\"content__lower\">\n          <div className=\"card__container\">\n            {data.map((d) => (\n              <div className=\"card\" key={d.title}>\n                <h2>{d.title}</h2>\n\n                <span>\n                  {state === \"weekly\"\n                    ? d.timeframes.weekly.current\n                    : state === \"monthly\"\n                    ? d.timeframes.monthly.current\n                    : state === \"daily\"\n                    ? d.timeframes.daily.current\n                    : \"\"}\n                  hrs\n                </span>\n\n                <img src={options} alt=\"options\" />\n                <span>\n                  Last Week - {\"\"}\n                  {state === \"weekly\"\n                    ? d.timeframes.weekly.previous\n                    : state === \"monthly\"\n                    ? d.timeframes.monthly.previous\n                    : state === \"daily\"\n                    ? d.timeframes.daily.previous\n                    : \"\"}\n                  hrs\n                </span>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}